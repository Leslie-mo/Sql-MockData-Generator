package com.leslie.sqlGenerator.coreMethon;

import com.leslie.sqlGenerator.coreMethon.builder.*;
import com.leslie.sqlGenerator.coreMethon.schema.SchemaException;
import com.leslie.sqlGenerator.coreMethon.schema.TableSchema.Field;
import com.leslie.sqlGenerator.coreMethon.schema.TableSchema;
import com.leslie.sqlGenerator.model.vo.GenerateVO;
import org.apache.commons.lang3.StringUtils;
import org.springframework.util.CollectionUtils;

import java.util.List;
import java.util.Map;

/**
 * data generator
 */
public class GeneratorFacade {
    public static GenerateVO generateAll(TableSchema tableSchema) {

        // valid
        validSchema(tableSchema);
        SqlBuilder sqlBuilder = new SqlBuilder();
        // build create table Sql
        String createSql = sqlBuilder.buildCreateTableSql(tableSchema);
        int mockNum = tableSchema.getMockNum();
        // generate data
        List<Map<String, Object>> dataList = DataBuilder.generateData(tableSchema, mockNum);
        // build insert Sql
        String insertSql = sqlBuilder.buildInsertSql(tableSchema, dataList);
        // build json
        String dataJson = JsonBuilder.buildJson(dataList);
        // build Java entity code
        String javaEntityCode = JavaCodeBuilder.buildJavaEntityCode(tableSchema);
        // build Java object code
        String javaObjectCode = JavaCodeBuilder.buildJavaObjectCode(tableSchema, dataList);
        // build TypeScript code
        String typescriptTypeCode = FrontendCodeBuilder.buildTypeScriptTypeCode(tableSchema);
        // encapsulation and returns
        GenerateVO generateVO = new GenerateVO();
        generateVO.setTableSchema(tableSchema);
        generateVO.setCreateSql(createSql);
        generateVO.setDataList(dataList);
        generateVO.setInsertSql(insertSql);
        generateVO.setDataJson(dataJson);
        generateVO.setJavaEntityCode(javaEntityCode);
        generateVO.setJavaObjectCode(javaObjectCode);
        generateVO.setTypescriptTypeCode(typescriptTypeCode);
        return generateVO;
    }

    public static void validSchema(TableSchema tableSchema) {
        if (tableSchema == null) {
            throw new SchemaException("Data is empty");
        }
        String tableName = tableSchema.getTableName();
        if (StringUtils.isBlank(tableName)) {
            throw new SchemaException("Table name cannot be empty");
        }
        Integer mockNum = tableSchema.getMockNum();
        // 20 are generated by default
        if (tableSchema.getMockNum() == null) {
            tableSchema.setMockNum(20);
            mockNum = 20;
        }
        if (mockNum > 100 || mockNum < 10) {
            throw new SchemaException("Generation number setting error");
        }
        List<Field> fieldList = tableSchema.getFieldList();
        if (CollectionUtils.isEmpty(fieldList)) {
            throw new SchemaException("Field list cannot be empty");
        }
        for (Field field : fieldList) {
            validField(field);
        }
    }

    /**
     * check field
     *
     * @param field
     */
    public static void validField(Field field) {
        String fieldName = field.getFieldName();
        String fieldType = field.getFieldType();
        if (StringUtils.isBlank(fieldName)) {
            throw new SchemaException("Field name cannot be empty");
        }
        if (StringUtils.isBlank(fieldType)) {
            throw new SchemaException("Field type cannot be empty");
        }
    }
}
